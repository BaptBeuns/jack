require 'rubygems'
require 'erb'
require "fileutils"
require "rails"


require File.expand_path(File.dirname(__FILE__) + "/association_defn")
require File.expand_path(File.dirname(__FILE__) + "/field_defn")
require File.expand_path(File.dirname(__FILE__) + "/model_defn")
require File.expand_path(File.dirname(__FILE__) + "/database_defn")
require File.expand_path(File.dirname(__FILE__) + "/project_defn")
require File.expand_path(File.dirname(__FILE__) + "/schema_rb_parser")
require File.expand_path(File.dirname(__FILE__) + "/models_dir_processor")
require File.expand_path(File.dirname(__FILE__) + "/template_processor")

project_yml = ARGV[0]
output_dir = ARGV[1]

project_defn = ProjectDefn.new(YAML.load(File.open(project_yml)))

def autogenerated
  <<EOF
/**
 * Autogenerated
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
EOF
end

def camelize(str) 
  str.split("_").each{|x| x[0,1] = x[0,1].upcase}.join("")
end

model_defns_by_namespace_table_names = {}

# initial pass to establish all the tables
project_defn.databases.each do |database_defn|
  model_defns_by_namespace_table_names[database_defn.namespace] = by_table_name = {}
  
  model_defns = SchemaRbParser.parse(database_defn.schema_rb)
  model_defns.each do |model_defn|
    model_defn.database_defn = database_defn
    model_defn.namespace = database_defn.namespace
    by_table_name[model_defn.table_name] = model_defn
  end
end

# second pass to accumulate all the associations
project_defn.databases.each do |database|
  by_table_name = model_defns_by_namespace_table_names[database.namespace]

  ModelsDirProcessor.process(database, by_table_name)
  
  by_table_name.values.each do |model_defn|
    model_defn.associations.each do |assoc_defn|
      assoc_defn.find_model(model_defns_by_namespace_table_names)
    end
    model_defn.associations.reject!{|assoc_defn| assoc_defn.defunct}
    model_defn.validate
  end
end

# third pass to generate the files
TemplateProcessor.process(project_defn, output_dir, model_defns_by_namespace_table_names)
# 
# 
# projects.each do |project|
#   by_table_name = model_defns_by_namespace_table_names[project["root_namespace"]]
# 
#   TemplateProcessor.process(project, output_dir, by_table_name.values.sort_by{|x| x.table_name}, model_defns_by_namespace_table_names)
# end
