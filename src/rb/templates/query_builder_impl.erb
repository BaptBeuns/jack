package <%= root_package %>.query;

import java.util.Set;

import <%= JACK_NAMESPACE %>.AbstractQueryBuilder;
import <%= JACK_NAMESPACE %>.IQueryOperator;
import <%= JACK_NAMESPACE %>.JackMatchers;
import <%= JACK_NAMESPACE %>.QueryConstraint;
import <%= JACK_NAMESPACE %>.QueryOrder;
import <%= JACK_NAMESPACE %>.QueryOrderConstraint;
import <%= JACK_NAMESPACE %>.LimitCriterion;
import <%= root_package %>.iface.<%= model_defn.iface_name %>;
import <%= root_package %>.models.<%= model_defn.model_name %>;


public class <%= model_defn.query_builder_name %> extends AbstractQueryBuilder<<%=model_defn.model_name%>> {

  public <%= model_defn.query_builder_name %>(<%= model_defn.iface_name %> caller) {
    super(caller);
  }

  public <%= model_defn.query_builder_name %> id(Long value) {
    addId(value);
    return this;
  }

  public <%= model_defn.query_builder_name %> id(Set<Long> values) {
    addIds(values);
    return this;
  }

  public <%= model_defn.query_builder_name %> limit(int offset, int nResults) {
    setLimit(new LimitCriterion(offset, nResults));
    return this;
  }

  public <%= model_defn.query_builder_name %> limit(int nResults) {
    setLimit(new LimitCriterion(nResults));
    return this;
  }

  public <%= model_defn.query_builder_name %> order() {
    this.addOrder(new QueryOrderConstraint(null, QueryOrder.ASC));
    return this;
  }
  
  public <%= model_defn.query_builder_name %> order(QueryOrder queryOrder) {
    this.addOrder(new QueryOrderConstraint(null, queryOrder));
    return this;
  }
  
  public <%= model_defn.query_builder_name %> orderById() {
    this.addOrder(new QueryOrderConstraint(null, QueryOrder.ASC));
    return this;
  }
  
  public <%= model_defn.query_builder_name %> orderById(QueryOrder queryOrder) {    
    this.addOrder(new QueryOrderConstraint(null, queryOrder));
    return this;
  }

  <% model_defn.fields.each do |field_defn| %>

  public <%= model_defn.query_builder_name %> <%= field_defn.name.camelcase(:lower) %>(<%= field_defn.java_type(true) %> value) {
    if(value == null) {
      addConstraint(new QueryConstraint<<%= field_defn.java_type(true) %>>(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, JackMatchers.<<%= field_defn.java_type(true) %>>isNull()));
    }
    else {
      addConstraint(new QueryConstraint<<%= field_defn.java_type(true) %>>(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, JackMatchers.equalTo(value)));
    }
    return this;
  }

  public <%= model_defn.query_builder_name %> <%= field_defn.name.camelcase(:lower) %>(IQueryOperator<<%= field_defn.java_type(true) %>> operator) {
    addConstraint(new QueryConstraint<<%= field_defn.java_type(true) %>>(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, operator));
    return this;
  }
  
  public <%= model_defn.query_builder_name %> orderBy<%= field_defn.name.camelcase(:upper) %>() {
    this.addOrder(new QueryOrderConstraint(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, QueryOrder.ASC));
    return this;
  }
  
  public <%= model_defn.query_builder_name %> orderBy<%= field_defn.name.camelcase(:upper) %>(QueryOrder queryOrder) {
    this.addOrder(new QueryOrderConstraint(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>, queryOrder));
    return this;
  }

  <% end %>
}
