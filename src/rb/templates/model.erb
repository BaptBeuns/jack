<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
/* generated from migration version <%= model_defn.migration_number %> */
package <%= root_package %>.models;

import java.io.IOException;
import java.util.Set;

import <%= root_package %>.I<%= db_name %>;

import <%= JACK_NAMESPACE %>.ModelWithId;
import <%= JACK_NAMESPACE %>.BelongsToAssociation;
import <%= JACK_NAMESPACE %>.HasManyAssociation;
import <%= JACK_NAMESPACE %>.HasOneAssociation;

import <%= project_defn.databases_namespace %>.IDatabases;

<% model_defn.associations.each do |a| %>
<% if a.assoc_model.database_defn != model_defn.database_defn %>
<%= a.assoc_model.import %> 
<% end %>
<% end %>

public class <%=model_defn.model_name%> extends ModelWithId {
  // Fields
  <% model_defn.fields.each do |field_defn| %>
  private <%= field_defn.java_type %> __<%= field_defn.name %>;
  <% end %>

  // Associations
  <% model_defn.associations.each do |assoc| %>
  private final <%= assoc.java_type %> <%= assoc.field_name %>;
  <% end %>

  public <%= model_defn.model_name %>(int id<%= create_signature_full.empty? ? "" : ", " %><%= create_signature_full %>, IDatabases databases) {
    super(id);
  <% model_defn.fields.each do |field_defn| %>
    this.__<%= field_defn.name %> = <%= field_defn.name %>;
  <% end %>

  <% model_defn.associations.each do |assoc| %>
    this.<%= assoc.field_name %> = <%= assoc.constructor_call %>;
  <% end %>
  }

<% model_defn.fields.each do |field_defn| %>

  public <%= field_defn.java_type %> <%= field_defn.getter %>{
    return __<%= field_defn.name %>;
  }

  public void set<%= field_defn.name.camelcase %>(<%= field_defn.java_type %> newval){
    this.__<%= field_defn.name %> = newval;
  }
<% end %>

<% model_defn.associations.each do |a| %>

  public <%= a.assoc_getter_type %> <%= a.assoc_getter %>() throws IOException {
    return <%= a.field_name %>.get();
  }
<% end %>

  @Override
  public Object getField(String fieldName) {
  <% model_defn.fields.each do |field_defn| %>
    if (fieldName.equals("<%= field_defn.name %>")) {
      return <%= field_defn.getter %>;
    }
  <% end %>
    throw new IllegalStateException("Invalid field name: " + fieldName);
  }

  public String toString() {
    return "<<%= model_defn.model_name %>"
      <% model_defn.fields.each do |field_defn| %>
      + " <%= field_defn.name %>: " + __<%= field_defn.name %>
      <% end %>
      + ">";
  }
}
