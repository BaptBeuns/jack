<%#
# Copyright 2011 Rapleaf
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
%>
<%= autogenerated %>
/* generated from migration version <%= model_defn.migration_number %> */
package <%= root_package %>.impl;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import <%= JACK_NAMESPACE %>.AbstractDatabaseModel;
import <%= JACK_NAMESPACE %>.BaseDatabaseConnection;
import <%= JACK_NAMESPACE %>.ModelWithId;

import <%= root_package %>.models.<%= model_defn.model_name %>;
import <%= root_package %>.iface.<%= model_defn.iface_name %>;

import <%= project_defn.databases_namespace %>.IDatabases;

public class <%= model_defn.impl_name %> extends AbstractDatabaseModel<<%= model_defn.model_name %>> implements <%= model_defn.iface_name %> {
  private final IDatabases databases;

  public <%= model_defn.impl_name %>(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "<%= model_defn.table_name %>", Arrays.asList(<%= model_defn.fields.map{|x| "\"#{x.name}\""}.join(", ") %>));
    this.databases = databases;
  }

  @Override
  public ModelWithId create(Map<Enum, Object> fieldsMap) throws IOException {
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.default_value.nil? %>
    <%= field_defn.java_type %> <%= field_defn.name %> = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <% else %>
    <%= field_defn.java_type(true) %> <%= field_defn.name %>_tmp = (<%= field_defn.java_type(true) %>) fieldsMap.get(<%= model_defn.model_name %>._Fields.<%= field_defn.name %>);
    <%= field_defn.java_type %> <%= field_defn.name %> = <%= field_defn.name %>_tmp == null ? <%= field_defn.default_value %> : <%= field_defn.name %>_tmp;
    <% end %>
    <% end %>
    return create(<%= model_defn.fields.map{|field| field.name }.join(', ') %>);
  }

  <%= render_create_method(model_defn, create_signature_full) %>
  <% unless create_signature_small.nil? %>
    <%= render_create_method(model_defn, create_signature_small, true) %>
  <% end %>

  public Set<<%= model_defn.model_name %>> find(Map<Enum, Object> fieldsMap) throws IOException {
    Set<<%= model_defn.model_name %>> foundSet = new HashSet<<%= model_defn.model_name %>>();
    <% date_field_names = model_defn.fields.select{|f| f.data_type == :date}.map{|f| f.name} %>
    <% datetime_field_names = model_defn.fields.select{|f| f.data_type == :datetime}.map{|f| f.name} %>

    <% if ! date_field_names.empty? %>
    EnumSet<<%= model_defn.model_name %>._Fields> dateFields = EnumSet.of(<%= date_field_names.map{|f| "#{model_defn.model_name}._Fields.#{f}"}.join(', ') %>);
    <% end %>
    <% if ! datetime_field_names.empty? %>
    EnumSet<<%= model_defn.model_name %>._Fields> dateTimeFields = EnumSet.of(<%= datetime_field_names.map{|f| "#{model_defn.model_name}._Fields.#{f}"}.join(', ') %>);
    <% end %>

    if (fieldsMap == null || fieldsMap.isEmpty()) {
      return foundSet;
    }

    StringBuilder statementString = new StringBuilder();
    statementString.append("SELECT * FROM ");
    statementString.append("<%= model_defn.table_name %>");
    statementString.append(" WHERE (");


    Iterator<Map.Entry<Enum, Object>> iter = fieldsMap.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry<Enum, Object> entry = iter.next();
      Enum field = entry.getKey();
      
      String queryValue = entry.getValue().toString();
      <% if ! date_field_names.empty? %>
      if (dateFields.contains(field)) {
        queryValue = new Date((Long) entry.getValue()).toString();
      }
      <% end %>
      <% if ! datetime_field_names.empty? %>
      if (dateTimeFields.contains(field)) {
        queryValue = new Timestamp((Long) entry.getValue()).toString();
      }
      <% end %>
      statementString.append(field + " = \"" + queryValue + "\"");
      if (iter.hasNext()) {
        statementString.append(" AND ");
      }
    }
    statementString.append(")");
    executeQuery(foundSet, statementString);

    return foundSet;
  }

  @Override
  protected void setAttrs(<%= model_defn.model_name %> model, PreparedStatement stmt) throws SQLException {
    <% x = 1 %>
    <% model_defn.fields.each do |field_defn| %>
    <% if field_defn.nullable? %>
    if (model.<%= field_defn.getter %> == null) {
      stmt.setNull(<%= x %>, java.sql.Types.<%= field_defn.sql_type %>);
    } else {
    <% else %>
    {
    <% end %>
      stmt.set<%= field_defn.prep_stmt_type %>(<%= x %>, <%= field_defn.prep_stmt_modifier("model.#{field_defn.getter}") %>);
    }
      <% x+= 1 %>
    <% end %>
    stmt.setLong(<%= x %>, model.getId());
  }

  @Override
  protected <%= model_defn.model_name %> instanceFromResultSet(ResultSet rs) throws SQLException {
    return new <%= model_defn.model_name %>(rs.getInt("id"),
    <% model_defn.fields.each do |field_defn| %>
      <%= field_defn.get_from_rs %>,
    <% end %>
      databases
    );
  }
}
