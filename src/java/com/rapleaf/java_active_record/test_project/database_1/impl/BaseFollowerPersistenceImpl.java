/**
 * Autogenerated
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.rapleaf.java_active_record.test_project.database_1.impl;

import java.util.Arrays;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.java_active_record.AbstractDatabaseModelWithId;
import com.rapleaf.java_active_record.DatabaseConnection;

import com.rapleaf.java_active_record.test_project.database_1.models.Follower;
import com.rapleaf.java_active_record.test_project.database_1.iface.IFollowerPersistence;

import com.rapleaf.java_active_record.test_project.IDatabases;

public class BaseFollowerPersistenceImpl extends AbstractDatabaseModelWithId<Follower> implements IFollowerPersistence {
  private final IDatabases databases;

  public BaseFollowerPersistenceImpl(DatabaseConnection conn, IDatabases databases) {
    super(conn, "followers", Arrays.asList("follower_id", "followed_id"));
    this.databases = databases;
  }

  public Follower create(final Integer follower_id, final Integer followed_id) throws IOException {
    long __id = realCreate(new AttrSetter() {
      public void set(PreparedStatement stmt) throws SQLException {
        if (follower_id == null) {
          stmt.setNull(1, java.sql.Types.INTEGER);
        } else {
          stmt.setInt(1, follower_id);
        }
        if (followed_id == null) {
          stmt.setNull(2, java.sql.Types.INTEGER);
        } else {
          stmt.setInt(2, followed_id);
        }
      }
    }, getInsertStatement(Arrays.asList("follower_id", "followed_id")));
    return new Follower(__id, follower_id, followed_id, databases);
  }

  @Override
  protected void setAttrs(Follower model, PreparedStatement stmt) throws SQLException {
    if (model.getFollowerId() == null) {
      stmt.setNull(1, java.sql.Types.INTEGER);
    } else {
      stmt.setInt(1, model.getFollowerId());
    }
    if (model.getFollowedId() == null) {
      stmt.setNull(2, java.sql.Types.INTEGER);
    } else {
      stmt.setInt(2, model.getFollowedId());
    }
    stmt.setLong(3, model.getId());
  }

  @Override
  protected Follower instanceFromResultSet(ResultSet rs) throws SQLException {
    return new Follower(rs.getLong("id"),
      getIntOrNull(rs, "follower_id"),
      getIntOrNull(rs, "followed_id"),
      databases
    );
  }
}
