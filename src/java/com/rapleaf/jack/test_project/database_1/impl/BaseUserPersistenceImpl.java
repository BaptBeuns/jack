
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
/* generated from migration version 20110324000133 */
package com.rapleaf.jack.test_project.database_1.impl;

import java.util.Arrays;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Timestamp;

import com.rapleaf.jack.AbstractDatabaseModel;
import com.rapleaf.jack.BaseDatabaseConnection;

import com.rapleaf.jack.test_project.database_1.models.User;
import com.rapleaf.jack.test_project.database_1.iface.IUserPersistence;

import com.rapleaf.jack.test_project.IDatabases;

public class BaseUserPersistenceImpl extends AbstractDatabaseModel<User> implements IUserPersistence {
  private final IDatabases databases;

  public BaseUserPersistenceImpl(BaseDatabaseConnection conn, IDatabases databases) {
    super(conn, "users", Arrays.asList("handle", "created_at_millis", "num_posts", "some_date", "some_datetime", "bio", "some_binary", "some_float", "some_boolean"));
    this.databases = databases;
  }


  public User create(final String handle, final Long created_at_millis, final int num_posts, final Long some_date, final Long some_datetime, final String bio, final byte[] some_binary, final Double some_float, final Boolean some_boolean) throws IOException {
    int __id = realCreate(new AttrSetter() {
      public void set(PreparedStatement stmt) throws SQLException {
          stmt.setString(1, handle);
        if (created_at_millis == null) {
          stmt.setNull(2, java.sql.Types.INTEGER);
        } else {
          stmt.setLong(2, created_at_millis);
        }
          stmt.setInt(3, num_posts);
        if (some_date == null) {
          stmt.setNull(4, java.sql.Types.DATE);
        } else {
          stmt.setDate(4, new Date(some_date));
        }
        if (some_datetime == null) {
          stmt.setNull(5, java.sql.Types.DATE);
        } else {
          stmt.setTimestamp(5, new Timestamp(some_datetime));
        }
        if (bio == null) {
          stmt.setNull(6, java.sql.Types.CHAR);
        } else {
          stmt.setString(6, bio);
        }
        if (some_binary == null) {
          stmt.setNull(7, java.sql.Types.BINARY);
        } else {
          stmt.setBytes(7, some_binary);
        }
        if (some_float == null) {
          stmt.setNull(8, java.sql.Types.DOUBLE);
        } else {
          stmt.setDouble(8, some_float);
        }
        if (some_boolean == null) {
          stmt.setNull(9, java.sql.Types.BOOLEAN);
        } else {
          stmt.setBoolean(9, some_boolean);
        }
      }
    }, getInsertStatement(Arrays.asList("handle", "created_at_millis", "num_posts", "some_date", "some_datetime", "bio", "some_binary", "some_float", "some_boolean")));
    User newInst = new User(__id, handle, created_at_millis, num_posts, some_date, some_datetime, bio, some_binary, some_float, some_boolean, databases);
    cachedById.put(__id, newInst);
    return newInst;
  }

  public User create(final String handle, final int num_posts) throws IOException {
    int __id = realCreate(new AttrSetter() {
      public void set(PreparedStatement stmt) throws SQLException {
          stmt.setString(1, handle);
          stmt.setInt(2, num_posts);
      }
    }, getInsertStatement(Arrays.asList("handle", "num_posts")));
    User newInst = new User(__id, handle, null, num_posts, null, null, null, null, null, null, databases);
    cachedById.put(__id, newInst);
    return newInst;
  }
  @Override
  protected void setAttrs(User model, PreparedStatement stmt) throws SQLException {
    {
      stmt.setString(1, model.getHandle());
    }
    if (model.getCreatedAtMillis() == null) {
      stmt.setNull(2, java.sql.Types.INTEGER);
    } else {
      stmt.setLong(2, model.getCreatedAtMillis());
    }
    {
      stmt.setInt(3, model.getNumPosts());
    }
    if (model.getSomeDate() == null) {
      stmt.setNull(4, java.sql.Types.DATE);
    } else {
      stmt.setDate(4, new Date(model.getSomeDate()));
    }
    if (model.getSomeDatetime() == null) {
      stmt.setNull(5, java.sql.Types.DATE);
    } else {
      stmt.setTimestamp(5, new Timestamp(model.getSomeDatetime()));
    }
    if (model.getBio() == null) {
      stmt.setNull(6, java.sql.Types.CHAR);
    } else {
      stmt.setString(6, model.getBio());
    }
    if (model.getSomeBinary() == null) {
      stmt.setNull(7, java.sql.Types.BINARY);
    } else {
      stmt.setBytes(7, model.getSomeBinary());
    }
    if (model.getSomeFloat() == null) {
      stmt.setNull(8, java.sql.Types.DOUBLE);
    } else {
      stmt.setDouble(8, model.getSomeFloat());
    }
    if (model.isSomeBoolean() == null) {
      stmt.setNull(9, java.sql.Types.BOOLEAN);
    } else {
      stmt.setBoolean(9, model.isSomeBoolean());
    }
    stmt.setLong(10, model.getId());
  }

  @Override
  protected User instanceFromResultSet(ResultSet rs) throws SQLException {
    return new User(rs.getInt("id"),
      rs.getString("handle"),
      getLongOrNull(rs, "created_at_millis"),
      getIntOrNull(rs, "num_posts"),
      getDateAsLong(rs, "some_date"),
      getDateAsLong(rs, "some_datetime"),
      rs.getString("bio"),
      rs.getBytes("some_binary"),
      rs.getDouble("some_float"),
      rs.getBoolean("some_boolean"),
      databases
    );
  }
}
