
/**
 * Autogenerated by Jack
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.rapleaf.jack.test_project;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.DatabaseConnection;
import com.rapleaf.jack.exception.ConnectionCreationFailureException;
import com.rapleaf.jack.test_project.database_1.IDatabase1;
import com.rapleaf.jack.test_project.database_1.impl.Database1Impl;
import com.rapleaf.jack.tracking.NoOpAction;
import com.rapleaf.jack.tracking.PostQueryAction;
import com.rapleaf.jack.transaction.Transactor;

public class DatabasesImpl implements IDatabases {
  private IDatabase1 database1;

  private final PostQueryAction postQueryAction;

  public DatabasesImpl() {
    this(new NoOpAction());
  }

  public DatabasesImpl(PostQueryAction postQueryAction) {
    this.postQueryAction = postQueryAction;
  }

  public DatabasesImpl(BaseDatabaseConnection database1_connection) {
    this(new NoOpAction(), database1_connection);
  }

  public DatabasesImpl(PostQueryAction postQueryAction, BaseDatabaseConnection database1_connection) {
    this.database1 = new Database1Impl(database1_connection, this, postQueryAction);
    this.postQueryAction = postQueryAction;
  }

  public IDatabase1 getDatabase1() {
    if (database1 == null) {
      this.database1 = new Database1Impl(new DatabaseConnection("database1"), this, this.postQueryAction);
    }
    return database1;
  }

  @Override
  public Transactor.Builder<IDatabase1> getDatabase1Transactor() {
    return Transactor.create(new DatabasesImpl()::getDatabase1);
  }

  public static void main(String[] args) {
    Transactor<IDatabase1> transactor = new DatabasesImpl().getDatabase1Transactor().get();
    ExecutorService executorService = Executors.newFixedThreadPool(5);
    Future future1 = executorService.submit(() -> {
      try {
        transactor.execute(db -> {
          System.out.println("Start first runnable, sleeping for 5 seconds...");
          try {
            Thread.sleep(5000);
          } catch (InterruptedException e) {
            e.printStackTrace();
          }
          System.out.println("First runnable wakes up");
          db.users().deleteAll();
          db.users().createDefaultInstance();
          System.out.println(db.users().findAll());
        });
      } catch (ConnectionCreationFailureException e) {
        e.printStackTrace();
      }
    });

    Future future2 = executorService.submit(() -> {
      try {
        transactor.execute(db -> {
          System.out.println("Start second runnable, sleeping for 3 seconds...");
          try {
            Thread.sleep(3000);
          } catch (InterruptedException e) {
            e.printStackTrace();
          }
          System.out.println("Second runnable wakes up");
          db.users().deleteAll();
          db.users().createDefaultInstance();
          System.out.println(db.users().findAll());
        });
      } catch (ConnectionCreationFailureException e) {
        e.printStackTrace();
      }
    });

    while (true) {
      if (future1.isDone() && future2.isDone()) {
        try {
          System.out.println(future1.get());
          System.out.println(future2.get());
        } catch (InterruptedException e) {
          e.printStackTrace();
        } catch (ExecutionException e) {
          e.printStackTrace();
        }
        executorService.shutdown();
        break;
      }
    }
  }

}
