
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.rapleaf.jack.test_project.database_1.impl;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

import com.rapleaf.jack.test_project.database_1.IDatabase1;
import com.rapleaf.jack.queries.GenericQuery;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.test_project.database_1.iface.ICommentPersistence;
import com.rapleaf.jack.test_project.database_1.iface.IImagePersistence;
import com.rapleaf.jack.test_project.database_1.iface.IPostPersistence;
import com.rapleaf.jack.test_project.database_1.iface.IUserPersistence;

import com.rapleaf.jack.test_project.IDatabases;

public class Database1Impl implements IDatabase1 {
  
  private final BaseDatabaseConnection conn;
  private final IDatabases databases;
  private final AtomicReference<ICommentPersistence> comments;
  private final AtomicReference<IImagePersistence> images;
  private final AtomicReference<IPostPersistence> posts;
  private final AtomicReference<IUserPersistence> users;

  public Database1Impl(BaseDatabaseConnection conn, IDatabases databases) {
    this.conn = conn;
    this.databases = databases;
    this.comments = new AtomicReference<ICommentPersistence>(new BaseCommentPersistenceImpl(conn, databases));
    this.images = new AtomicReference<IImagePersistence>(new BaseImagePersistenceImpl(conn, databases));
    this.posts = new AtomicReference<IPostPersistence>(new BasePostPersistenceImpl(conn, databases));
    this.users = new AtomicReference<IUserPersistence>(new BaseUserPersistenceImpl(conn, databases));
}

  public GenericQuery.Builder createQuery() {
    return GenericQuery.create(conn);
  }

  public ICommentPersistence comments(){
    return comments.get();
  }

  public IImagePersistence images(){
    return images.get();
  }

  public IPostPersistence posts(){
    return posts.get();
  }

  public IUserPersistence users(){
    return users.get();
  }

  public boolean deleteAll() throws IOException {
    boolean success = true;
    try {
    success &= comments().deleteAll();
    success &= images().deleteAll();
    success &= posts().deleteAll();
    success &= users().deleteAll();
    } catch (IOException e) {
      throw e;
    }
    return success;
  }

  public void disableCaching() {
    comments().disableCaching();
    images().disableCaching();
    posts().disableCaching();
    users().disableCaching();
  }

  public void setAutoCommit(boolean autoCommit) {
    conn.setAutoCommit(autoCommit);
  }

  public boolean getAutoCommit() {
    return conn.getAutoCommit();
  }

  public void commit() {
    conn.commit();
  }

  public void rollback() {
    conn.rollback();
  }

  public void resetConnection() {
    conn.resetConnection();
  }

  public IDatabases getDatabases() {
    return databases;
  }

}
