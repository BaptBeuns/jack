
/**
 * Autogenerated by Jack
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.rapleaf.jack.test_project.database_1.impl;

import java.io.IOException;

import com.rapleaf.jack.test_project.database_1.IDatabase1;
import com.rapleaf.jack.queries.GenericQuery;
import com.rapleaf.jack.BaseDatabaseConnection;
import com.rapleaf.jack.test_project.database_1.iface.ICommentPersistence;
import com.rapleaf.jack.test_project.database_1.iface.IImagePersistence;
import com.rapleaf.jack.test_project.database_1.iface.IPostPersistence;
import com.rapleaf.jack.test_project.database_1.iface.IUserPersistence;

import com.rapleaf.jack.test_project.IDatabases;

public class Database1Impl implements IDatabase1 {
  
  private final BaseDatabaseConnection conn;
  private final IDatabases databases;

  private boolean disableCaching;
  private volatile ICommentPersistence comments;
  private volatile IImagePersistence images;
  private volatile IPostPersistence posts;
  private volatile IUserPersistence users;

  public Database1Impl(BaseDatabaseConnection conn, IDatabases databases) {
    this.conn = conn;
    this.databases = databases;
    this.disableCaching = false;
    this.comments = null;
    this.images = null;
    this.posts = null;
    this.users = null;
  }

  public GenericQuery.Builder createQuery() {
    return GenericQuery.create(conn);
  }

  public ICommentPersistence comments(){
    if (comments == null) {
      synchronized (this) {
        ICommentPersistence commentsTmp = new BaseCommentPersistenceImpl(conn, databases);
        this.comments = commentsTmp;
      }
    }
    
    if (disableCaching) {
      comments.disableCaching();
    }
    
    return comments;
  }

  public IImagePersistence images(){
    if (images == null) {
      synchronized (this) {
        IImagePersistence imagesTmp = new BaseImagePersistenceImpl(conn, databases);
        this.images = imagesTmp;
      }
    }
    
    if (disableCaching) {
      images.disableCaching();
    }
    
    return images;
  }

  public IPostPersistence posts(){
    if (posts == null) {
      synchronized (this) {
        IPostPersistence postsTmp = new BasePostPersistenceImpl(conn, databases);
        this.posts = postsTmp;
      }
    }
    
    if (disableCaching) {
      posts.disableCaching();
    }
    
    return posts;
  }

  public IUserPersistence users(){
    if (users == null) {
      synchronized (this) {
        IUserPersistence usersTmp = new BaseUserPersistenceImpl(conn, databases);
        this.users = usersTmp;
      }
    }
    
    if (disableCaching) {
      users.disableCaching();
    }
    
    return users;
  }

  public boolean deleteAll() throws IOException {
    boolean success = true;
    try {
    success &= comments().deleteAll();
    success &= images().deleteAll();
    success &= posts().deleteAll();
    success &= users().deleteAll();
    } catch (IOException e) {
      throw e;
    }
    return success;
  }

  public void disableCaching() {
    disableCaching = true;
    if (comments != null) {
      comments.disableCaching();
    }
    if (images != null) {
      images.disableCaching();
    }
    if (posts != null) {
      posts.disableCaching();
    }
    if (users != null) {
      users.disableCaching();
    }
  }

  public void setAutoCommit(boolean autoCommit) {
    conn.setAutoCommit(autoCommit);
  }

  public boolean getAutoCommit() {
    return conn.getAutoCommit();
  }

  public void commit() {
    conn.commit();
  }

  public void rollback() {
    conn.rollback();
  }

  public void resetConnection() {
    conn.resetConnection();
  }

  public IDatabases getDatabases() {
    return databases;
  }

}
